/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package gp.net.radius.test;

import gp.net.radius.data.AVPBytes;
import gp.net.radius.data.AVPInteger;
import gp.net.radius.data.RadiusMessage;
import gp.net.radius.data.AVPString;
import gp.utils.arrays.Array;
import gp.utils.arrays.ReadOnlyDefaultArray;
import java.net.InetAddress;

/**
 *
 * @author Gwenhael Pasquiers
 */
public class FunctionalTest
{
    public static void main(String... args)
    {

//        7.  Examples
//        
//        A few examples are presented to illustrate the flow of packets and
//        use of typical attributes.  These examples are not intended to be
//        exhaustive, many others are possible.  Hexadecimal dumps of the
//        example packets are given in network byte order, using the shared
//        secret "xyzzy5461".


//        7.1.  User Telnet to Specified Host
//
//           The NAS at 192.168.1.16 sends an Access-Request UDP packet to the
//           RADIUS Server for a user named nemo logging in on port 3 with
//           password "arctangent".
//
//           The Request Authenticator is a 16 octet random number generated by
//           the NAS.
//
//           The User-Password is 16 octets of password padded at end with nulls,
//           XORed with MD5(shared secret|Request Authenticator).
//
            String req_7_1 =
              "01 00 00 38 0f 40 3f 94 73 97 80 57 bd 83 d5 cb\n" +
              "98 f4 22 7a 01 06 6e 65 6d 6f 02 12 0d be 70 8d\n" +
              "93 d4 13 ce 31 96 e4 3f 78 2a 0a ee 04 06 c0 a8\n" +
              "01 10 05 06 00 00 00 03";
//
//               1 Code = Access-Request (1)
//               1 ID = 0
//               2 Length = 56
//              16 Request Authenticator
//
//              Attributes:
//               6  User-Name = "nemo"
//              18  User-Password
//               6  NAS-IP-Address = 192.168.1.16
//               6  NAS-Port = 3
//
//           The RADIUS server authenticates nemo, and sends an Access-Accept UDP
//           packet to the NAS telling it to telnet nemo to host 192.168.1.3.
//
//           The Response Authenticator is a 16-octet MD5 checksum of the code
//           (2), id (0), Length (38), the Request Authenticator from above, the
//           attributes in this reply, and the shared secret.
            String res_7_1 =
              "02 00 00 26 86 fe 22 0e 76 24 ba 2a 10 05 f6 bf\n" +
              "9b 55 e0 b2 06 06 00 00 00 01 0f 06 00 00 00 00\n" +
              "0e 06 c0 a8 01 03";
//
//               1 Code = Access-Accept (2)
//               1 ID = 0 (same as in Access-Request)
//               2 Length = 38
//              16 Response Authenticator
//
//              Attributes:
//               6  Service-Type (6) = Login (1)
//               6  Login-Service (15) = Telnet (0)
//               6  Login-IP-Host (14) = 192.168.1.3
        
        try
        {
            
            byte[] res_auth_bytes = {(byte)0x0f, (byte)0x40, (byte)0x3f, (byte)0x94, (byte)0x73, (byte)0x97, (byte)0x80, (byte)0x57, (byte)0xbd, (byte)0x83, (byte)0xd5, (byte)0xcb, (byte)0x98, (byte)0xf4, (byte)0x22, (byte)0x7a};
            Array auth = new ReadOnlyDefaultArray(res_auth_bytes);
            
            RadiusMessage request = new RadiusMessage();
            request.setCode(1);
            request.setIdentifier(0);
            request.setAuthenticator(auth);
            request.setSecret(new ReadOnlyDefaultArray("xyzzy5461".getBytes()));
            
            request.addAVP(new AVPString(1, "nemo", "UTF-8"));
            request.addAVP(new AVPString(2, "arctangent", "UTF-8"));
            request.addAVP(new AVPBytes(4, new ReadOnlyDefaultArray(InetAddress.getByName("192.168.1.16").getAddress())));
            request.addAVP(new AVPInteger(5, 3));

            request.encodeUserPasswordAvp();

            if(!request.getArray().toString().equals(req_7_1))
            {
                throw new Exception("test failed at request");
            }
            
            
            RadiusMessage response = new RadiusMessage();
            response.setCode(2);
            response.setIdentifier(0);
            response.setSecret(new ReadOnlyDefaultArray("xyzzy5461".getBytes()));
            
            response.addAVP(new AVPInteger(6, 1));
            response.addAVP(new AVPInteger(15, 0));
            response.addAVP(new AVPBytes(14, new ReadOnlyDefaultArray(InetAddress.getByName("192.168.1.3").getAddress())));
            
            response.computeResponseAuthenticator(request.getAuthenticator());

            if(!response.getArray().toString().equals(res_7_1))
            {
                throw new Exception("test failed at response");
            }
            
            System.err.println("Test RFC example 7_1 succeeded");
        }
        catch(Exception e)
        {
            System.err.println("Test RFC example 7_1 failed");
            e.printStackTrace();
        }
    }

}
